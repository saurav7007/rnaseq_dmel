View(count_data)
View(count_data)
count_data <- read.csv(file="results/counts/all.counts.txt", skip = 1, sep = "\t", header = TRUE)
View(count_data)
count_data <- read.csv(file="results/counts/all.counts.txt", skip = 1, sep = "\t", header = TRUE)
View(count_data)
count_data <- read.csv(file="results/counts/all.counts.txt", skip = 1, sep = "\t", header = TRUE)
View(count_data)
count_data <- read.csv(file="results/counts/all.counts.txt", sep = "\t", header = TRUE)
View(count_data)
count_data <- read.csv(
file="results/counts/all.counts.txt",
sep = "\t",
header = TRUE
)
View(count_data)
View(count_data)
colnames(count_data)
typeof(colnames(count_data))
s_data <- data.frame(
Sample <- c(colnames(count_data))
)
View(s_data)
s_data <- data.frame(
Sample <- c(colnames(count_data)[1:])
View(s_data)
colnames(count_data)[1:]
colnames(count_data)[-1]
colnames(count_data)[-1]
s_data <- data.frame(
Sample <- c(colnames(count_data)[-1])
)
View(s_data)
colnames(s_data)
s_data <- data.frame(
"Sample" <- c(colnames(count_data)[-1])
)
View(s_data)
s_data <- data.frame(
"Sample" = c(colnames(count_data)[-1])
)
View(s_data)
View(s_data)
?basename
basename("file1.sort.bam")
?file_path_sans_ext
sample_row <- c(colnames(count_data)[-1])
file.path_sans_ext(sample_row, exts = c(".sorted.bam"))
file_path_sans_ext()
?file_path_sans_ext
str_replace()
gsub()
sample_data <- data.frame(
"Sample" = sample_row,
"Condition" = lapply(sample_row, gsub(".sort.bam", ""))
)
?lapply
sample_data <- data.frame(
"Sample" = sample_row,
"Condition" = lapply(sample_row, gsub,pattern = ".sort.bam", replacement = "")
)
View(sample_data)
sample_data <- data.frame(
"Sample" = sample_row,
"Condition" = sapply(sample_row, gsub,pattern = ".sort.bam", replacement = "")
)
View(sample_data)
sample_data <- data.frame(
"Sample" = sample_row
#"Condition" = sapply(sample_row, gsub,pattern = ".sort.bam", replacement = "")
)
View(sample_data)
sample_data <- data.frame(
"Sample" = sample_row,
"Condition" = 1
)
sample_data <- data.frame(
"Sample" = sample_row,
"Condition" = lapply(sample_row, gsub, pattern = ".sort.bam", replacement = "")
)
View(sample_data)
sample_data <- data.frame(
"Sample" = sample_row,
"Condition" = vapply(sample_row, gsub, pattern = ".sort.bam", replacement = "")
)
sample_row <- c(colnames(count_data)[-1])
sample_data <- data.frame(
"Sample" = sample_row,
"Condition" = sapply(sample_row, gsub, pattern = ".sort.bam", replacement = "")
)
View(sample_data)
sample_data <- data.frame(
"Sample" = sample_row,
"Condition" = gsub(".sort.bam", "", sample_row)
)
View(sample_data)
View(sample_data)
sample_data <- data.frame(
"Sample" = sample_row,
"Condition" = gsub(".sorted.bam", "", sample_row)
)
View(sample_data)
sample_data <- data.frame(
Sample = sample_row,
Condition = gsub(".sorted.bam", "", sample_row),
Record_Type = ifelse(sample_row == "WT1.sorted.bam", "single-read", "paired-end")
)
View(sample_data)
sample_data <- data.frame(
Sample = sample_row,
Condition = gsub(".sorted.bam", "", sample_row),
Record_Type = ifelse(sample_row == "WT_1.sorted.bam", "single-read", "paired-end")
)
View(sample_data)
colnames(count_data)
colnames(count_data)[-1]
rownames(sample_data)
sample_data$Sample
colnames(count_data)[-1]
colnames(count_data)[-1] %in% sample_data$Sample
all(colnames(count_data)[-1] %in% sample_data$Sample)
all(colnames(count_data)[-1] == sample_data$Sample)
ls()
list.files(path = "data")
files <- list.files(path = "data", pattern = "\\.fastq\\.gz$", full.names = FALSE)
list.files(path = "data", pattern = "\\.fastq\\.gz$", full.names = FALSE)
fq <- list.files("data", pattern="\\.fastq\\.gz$", full.names=FALSE)
sub("_R[12]\\.fastq\\.gz", "", fq)
sub("_R[12]\\.fastq\\.gz", "", fq)
split(fq, sub("_R[12]\\.fastq\\.gz", "", fq))
?split
library("tidyverse")
samples <- read.csv("samplesheet.csv") %>%
mutate(
Record_Type = if_else(nzchar(trimws(read2)), "PE", "SE"),
Reads = purrr::map2(read1, read2, ~ c(.x, .y)[nzchar(trimws(c(.x, .y)))] )
)
View(samples)
samples <- read.csv("samplesheet.csv") %>%
mutate(
Record_Type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
)
View(samples)
samples <- read.csv("samplesheet.csv") %>%
mutate(
Record_Type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(-read1, -read2)
View(samples)
samples <- read.csv("samplesheet.csv") %>%
mutate(
sample_id = sample_id + ".sorted.bam",
Record_Type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(-read1, -read2)
samples <- read.csv("samplesheet.csv") %>%
mutate(
sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(-read1, -read2)
View(samples)
samples_info <- read.csv("samplesheet.csv") %>%
mutate(
sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(-read1, -read2)
samples_info$sample_id %in% colnames(count_data)[-1]
samples_info$sample_id == colnames(count_data)[-1]
# Reorder Count columns based on row order of metadata (sample_info)
count_data <- count_data[, rownames(samples_info)]
count_data <- count_data[, rownames(samples_info)[-1]]
rownames(samples_info)[-1]
samples_info$sample_id
# Reorder Count columns based on row order of metadata (sample_info)
count_data <- count_data[, samples_info$sample_id]
View(count_data)
library("tidyverse")
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
library("apeglm")
library("DEGreport")
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = samples_info,
design = ~ condition)
View(dds)
dds
# Creating sample information (Metadata)
samples_info <- read.csv("samplesheet.csv") %>%
mutate(
sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(-read1, -read2)
# Reading the merged count data (Count data)
count_data <- read.csv(
file="results/counts/all.counts.txt",
sep = "\t",
header = TRUE
)
# Reorder Count columns based on row order of metadata (sample_info)
count_data <- count_data[, samples_info$sample_id]
# Construct DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = samples_info,
design = ~ condition)
dds
count_data <- read.csv(
file="results/counts/all.counts.txt",
sep = "\t",
header = TRUE,
row.names = 1
)
View(count_data)
count_data <- read.csv(
file="results/counts/all.counts.txt",
sep = "\t",
header = TRUE
)
View(count_data)
count_data <- read.csv(
file="results/counts/all.counts.txt",
sep = "\t",
header = TRUE,
row.names = 1
)
View(count_data)
# Creating sample information (Metadata)
samples_info <- read.csv("samplesheet.csv") %>%
mutate(
sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(sample_id, condition, record_type)
# Reading the merged count data (Count data)
count_data <- read.csv(
file="results/counts/all.counts.txt",
sep = "\t",
header = TRUE,
row.names = 1
)
# Reorder Count columns based on row order of metadata (sample_info)
count_data <- count_data[, samples_info$sample_id]
# Construct DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = samples_info,
design = ~ condition)
dds
View(samples_info)
samples_info <- read.csv("samplesheet.csv") %>%
mutate(
sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(sample_id, condition, record_type) %>%
row.names = 1
# Creating sample information (Metadata)
samples_info <- read.csv("samplesheet.csv") %>%
mutate(
sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(sample_id, condition, record_type) %>%
column_to_rownames(var = "sample_id")
# Reading the merged count data (Count data)
count_data <- read.csv(
file="results/counts/all.counts.txt",
sep = "\t",
header = TRUE,
row.names = 1
)
# Reorder Count columns based on row order of metadata (sample_info)
count_data <- count_data[, samples_info$sample_id]
# Construct DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = samples_info,
design = ~ condition)
View(count_data)
count_data <- count_data[, rownames(samples_info)]
samples_info <- read.csv("samplesheet.csv") %>%
mutate(
sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(sample_id, condition, record_type) %>%
column_to_rownames(var = "sample_id")
View(samples_info)
count_data <- read.csv(
file="results/counts/all.counts.txt",
sep = "\t",
header = TRUE,
row.names = 1
)
View(count_data)
# Reorder Count columns based on row order of metadata (sample_info)
count_data <- count_data[, rownames(samples_info)]
# Creating sample information (Metadata)
samples_info <- read.csv("samplesheet.csv") %>%
mutate(
sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(sample_id, condition, record_type) %>%
column_to_rownames(var = "sample_id")
# Reading the merged count data (Count data)
count_data <- read.csv(
file="results/counts/all.counts.txt",
sep = "\t",
header = TRUE,
row.names = 1
)
# Reorder Count columns based on row order of metadata (sample_info)
count_data <- count_data[, rownames(samples_info)]
# Construct DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = samples_info,
design = ~ condition
)
dds
samples_info <- read.csv("samplesheet.csv") %>%
mutate(
sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(sample_id, condition, record_type)
View(samples_info)
View(count_data)
samples_info <- read.csv("samplesheet.csv", row.names = 1) %>%
mutate(
sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(sample_id, condition, record_type)
samples_info <- read.csv("samplesheet.csv", row.names = 1) %>%
mutate(
sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(condition, record_type)
samples_info <- read.csv("samplesheet.csv", row.names = 1) %>%
mutate(
#sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(condition, record_type)
View(samples_info)
samples_info <- read.csv("samplesheet.csv", row.names = 1) %>%
mutate(
#sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(condition, record_type) %>%
column_to_rownames(c(paste0(rownames, ".sorted.bam")))
samples_info <- read.csv("samplesheet.csv", row.names = 1) %>%
mutate(
#sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(condition, record_type) %>%
column_to_rownames(c(paste0(rownames(), ".sorted.bam")))
samples_info <- read.csv("samplesheet.csv", row.names = 1) %>%
mutate(
#sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(condition, record_type) %>%
{ `rownames<-`(., paste0(rownames(.), ".sorted.bam")) }
View(samples_info)
# Creating sample information (Metadata)
samples_info <- read.csv("samplesheet.csv", row.names = 1) %>%
mutate(
#sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(condition, record_type) %>%
{ `rownames<-`(., paste0(rownames(.), ".sorted.bam")) }
# Reading the merged count data (Count data)
count_data <- read.csv(
file="results/counts/all.counts.txt",
sep = "\t",
header = TRUE,
row.names = 1
)
# Reorder Count columns based on row order of metadata (sample_info)
count_data <- count_data[, rownames(samples_info)]
# Construct DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = samples_info,
design = ~ condition
)
dds
View(count_data)
View(samples_info)
View(count_data)
View(samples_info)
View(count_data)
View(dds)
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = samples_info,
design = ~ condition
)
View(count_data)
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds$condition
dds$condition <- relevel(dds$condition, ref = "WT")
View(dds)
dds@design[[2]]
dds$condition
View(samples_info)
dds@NAMES
# Creating sample information (Metadata)
samples_info <- read.csv("samplesheet.csv", row.names = 1) %>%
mutate(
#sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(condition, batch, record_type) %>%
{ `rownames<-`(., paste0(rownames(.), ".sorted.bam")) }
# Reading the merged count data (Count data)
count_data <- read.csv(
file="results/counts/all.counts.txt",
sep = "\t",
header = TRUE,
row.names = 1
)
# Reorder Count columns based on row order of metadata (sample_info)
count_data <- count_data[, rownames(samples_info)]
# Construct DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = samples_info,
design = ~ batch + condition
)
# Keep rows with atleast 10 reads across samples
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# Specifying the reference level
dds$condition <- relevel(dds$condition, ref = "WT")
# Run DESeq
dds <- DESeq(dds)
vsd <- vst(dds)
plotPCA(vsd, intgroup = c("batch", "condition"))
res <- results(dds)
res
res
resultsNames(dds)
gc()
# Creating sample information (Metadata)
samples_info <- read.csv("samplesheet.csv", row.names = 1) %>%
mutate(
#sample_id = paste0(sample_id, ".sorted.bam"),
record_type = if_else(nzchar(trimws(read2)), "pair-end", "single-end")
) %>%
select(condition, batch, record_type) %>%
{ `rownames<-`(., paste0(rownames(.), ".sorted.bam")) }
# Reading the merged count data (Count data)
count_data <- read.csv(
file="results/counts/all.counts.txt",
sep = "\t",
header = TRUE,
row.names = 1
)
# Reorder Count columns based on row order of metadata (sample_info)
count_data <- count_data[, rownames(samples_info)]
# Construct DESeqDataSet
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = samples_info,
design = ~ batch + condition
)
# Keep rows with atleast 10 reads across samples
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# Specifying the reference level
dds$condition <- relevel(dds$condition, ref = "WT")
# Run DESeq
dds <- DESeq(dds)
# To check if the sames are clustered based on bactch
vsd <- vst(dds)
plotPCA(vsd, intgroup = c("batch", "condition"))
# Results
res <- results(dds)
resultsNames(dds)
summary(res)
res05 <- results(dds, alpha=0.05)
summary(res05)
res
plotMA(res, ylim=c(-2,2))
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","type")])
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","record_type")])
pheatmap(assay(vsd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
sampleDistMatrix <- as.matrix(sampleDists)
sampleDistMatrix <- as.matrix(sampleDists)
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$condition, vsd$record_type, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
plotPCA(vsd, intgroup = c("condition", "record_type"))
